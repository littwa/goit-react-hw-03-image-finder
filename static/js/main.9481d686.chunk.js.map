{"version":3,"sources":["components/Searchbar/Searchbar.js","components/FetchImages/FetchImages.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Modal/Modal.js","components/App.js","index.js"],"names":["Searchbar","state","inputValue","agreed","handleChange","e","persist","setState","target","value","handleSubmit","preventDefault","props","forSubmitSearchbar","handleCheckbox","checked","onInfiniteScroll","className","onSubmit","this","style","width","fontSize","color","type","onChange","autoComplete","autoFocus","placeholder","React","Component","FetchImages","q","page","pageAmount","fetch","then","resp","json","ImageGalleryItem","webformatURL","largeImageURL","modal","onClick","src","alt","defaultProps","ImageGallery","images","console","log","map","el","key","id","Button","handleClick","fetchImgAPI","Modal","closeCallback","closeModal","window","addEventListener","removeEventListener","nodeName","large","App","openModal","loading","error","noImages","InfiniteScroll","query","pageNumbear","largeImageForModal","undefined","options","rootMargin","threshold","onEntry","entries","observer","forEach","entry","isIntersecting","IntersectionObserver","data","arrImg","hits","length","prevState","catch","finally","openModalToggle","prevProps","document","documentElement","scrollHeight","snapshot","specDiv","querySelector","observe","scrollTo","top","behavior","height","clientWidth","ReactDOM","render","getElementById"],"mappings":"4RAsDeA,E,4MA7CdC,MAAQ,CACPC,WAAY,GACZC,QAAQ,G,EAETC,aAAe,SAAAC,GACdA,EAAEC,UACF,EAAKC,SAAS,CAAEL,WAAYG,EAAEG,OAAOC,S,EAEtCC,aAAe,SAAAL,GACdA,EAAEM,iBAEF,EAAKC,MAAMC,mBAAmB,EAAKZ,MAAMC,a,EAE1CY,eAAiB,SAAAT,GAChB,EAAKE,SAAS,CAAEJ,OAAQE,EAAEG,OAAOO,UACjC,EAAKH,MAAMI,iBAAiBX,EAAEG,OAAOO,U,uDAGrC,OACC,4BAAQE,UAAU,aACjB,0BAAMC,SAAUC,KAAKT,aAAcO,UAAU,cAC5C,2BAAOG,MAAO,CAAEC,MAAO,IAAKC,SAAU,GAAIC,MAAO,SAChD,2BAAOC,KAAK,WAAWT,QAASI,KAAKlB,MAAME,OAAQsB,SAAUN,KAAKL,iBADnE,mBAKA,4BAAQU,KAAK,SAASP,UAAU,qBAC/B,0BAAMA,UAAU,2BAAhB,WAGD,2BACCQ,SAAUN,KAAKf,aACfK,MAAOU,KAAKlB,MAAMC,WAClBe,UAAU,mBACVO,KAAK,OACLE,aAAa,MACbC,WAAS,EACTC,YAAY,mC,GA3CMC,IAAMC,WCGfC,EANK,SAACC,EAAGC,EAAMC,GAC7B,OAAOC,MAAM,qEAAD,OAC0DH,EAD1D,iBACoEC,EADpE,6DAC6HC,IACvIE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WCAfC,EAAmB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,MACxD,OACC,wBACCC,QAAS,WACRD,EAAMD,IAEPxB,UAAU,oBAEV,yBAAK2B,IAAKJ,EAAcK,IAAI,MAAM5B,UAAU,6BAW/CsB,EAAiBO,aAAe,CAC/BN,aAAc,sEACdC,cAAe,uEAGDF,QCDAQ,EAtBM,SAAC,GAAuB,IAArBL,EAAoB,EAApBA,MAAOM,EAAa,EAAbA,OAE9B,OADAC,QAAQC,IAAI,uBAEX,wBAAIjC,UAAU,gBACZ+B,EAAOG,KAAI,SAAAC,GAAE,OACb,kBAAC,EAAD,CACCC,IAAKD,EAAGE,GACRd,aAAcY,EAAGZ,aACjBC,cAAeW,EAAGX,cAClBC,MAAOA,OAGT,yBAAKzB,UAAU,iCCGHsC,E,4MAbdC,YAAc,SAAAnD,GACb,EAAKO,MAAM6C,e,uDAIX,OACC,4BAAQd,QAASxB,KAAKqC,YAAavC,UAAW,UAA9C,iB,GATkBY,IAAMC,W,gBC+BZ4B,E,4MAtBdC,cAAgB,SAAAtD,GACD,WAAVA,EAAEgD,KACL,EAAKzC,MAAMgD,c,kEAPZC,OAAOC,iBAAiB,UAAW3C,KAAKwC,iB,6CAGxCE,OAAOE,oBAAoB,UAAW5C,KAAKwC,iB,+BAQlC,IAAD,OACR,OACC,yBACChB,QAAS,SAAAtC,GACc,QAAtBA,EAAEG,OAAOwD,UAAsB,EAAKpD,MAAMgD,cAE3C3C,UAAU,WAEV,yBAAKA,UAAU,SACd,yBAAK2B,IAAKzB,KAAKP,MAAMqD,MAAOpB,IAAI,c,GAxBjBhB,IAAMC,WC8GXoC,E,4MAxGdjE,MAAQ,CACPkE,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,UAAU,EACVC,gBAAgB,EAChBC,MAAO,GACPxB,OAAQ,GACRyB,YAAa,EACbvC,WAAY,GACZwC,wBAAoBC,G,EAyBrBC,QAAU,CACTC,WAAY,OACZC,UAAW,I,EAEZC,QAAU,SAACC,EAASC,GACnBD,EAAQE,SAAQ,SAAAC,GACfA,EAAMC,gBAAkB,EAAK3B,kB,EAG/BwB,SAAW,IAAII,qBAAqB,EAAKN,QAAS,EAAKH,S,EAEvD5D,iBAAmB,SAAAP,GAAK,OAAI,EAAKF,SAAS,CAAEgE,eAAgB9D,K,EAG5DgD,YAAc,WACb,EAAKlD,SAAS,CAAE6D,SAAS,IADN,MAEsB,EAAKnE,MAAxCuE,EAFa,EAEbA,MAAOC,EAFM,EAENA,YAAavC,EAFP,EAEOA,WAE1BH,EAAYyC,EAAOC,EAAavC,GAC9BE,MAAK,SAAAkD,GACL,IAAIC,EAASD,EAAKE,KAAKrC,KAAI,SAAAC,GAAE,MAAK,CACjCE,GAAIF,EAAGE,GACPd,aAAcY,EAAGZ,aACjBC,cAAeW,EAAGX,kBAEG,IAAlB8C,EAAOE,QACV,EAAKlF,SAAS,CAAE+D,UAAU,IAE3B,EAAK/D,UAAS,SAAAmF,GAAS,MAAK,CAC3B1C,OAAO,GAAD,mBAAM0C,EAAU1C,QAAhB,YAA2BuC,IACjCd,YAAciB,EAAUjB,aAAe,SAGxCkB,OAAM,SAAAtB,GAAK,OAAI,EAAK9D,SAAS,CAAE8D,aAC/BuB,SAAQ,kBAAM,EAAKrF,SAAS,CAAE6D,SAAS,Q,EAG1CvD,mBAAqB,SAAAJ,GAChB,EAAKR,MAAMuE,QAAU/D,GACxB,EAAKF,SAAS,CAAEiE,MAAO/D,EAAOuC,OAAQ,GAAIyB,YAAa,EAAGH,UAAU,K,EAItEuB,gBAAkB,SAAApD,GACjB,EAAKlC,UAAS,iBAAO,CAAE4D,WAAY,EAAKlE,MAAMkE,UAAWO,mBAAoBjC,O,sEAlEtDqD,EAAWJ,GAClC,OAAOK,SAASC,gBAAgBC,aAAe,M,yCAG7BH,EAAWJ,EAAWQ,GAExC,IAAIC,EAAUJ,SAASK,cAAc,+BACrCD,GAAWhF,KAAKlB,MAAMsE,gBAAkBpD,KAAK8D,SAASoB,QAAQF,GAE1DT,EAAUlB,QAAUrD,KAAKlB,MAAMuE,OAClCrD,KAAKsC,cAGFiC,EAAU1C,OAAOyC,SAAWtE,KAAKlB,MAAM+C,OAAOyC,QAAUC,EAAU1C,OAAOyC,OAAS,GACrF5B,OAAOyC,SAAS,CACfC,IAAKL,EACLM,SAAU,a,+BAsDZ,OACC,oCACC,kBAAC,EAAD,CAAWxF,iBAAkBG,KAAKH,iBAAkBH,mBAAoBM,KAAKN,qBAC5EM,KAAKlB,MAAM+C,OAAOyC,OAAS,GAAK,kBAAC,EAAD,CAAc/C,MAAOvB,KAAK0E,gBAAiB7C,OAAQ7B,KAAKlB,MAAM+C,SAC9F7B,KAAKlB,MAAM+C,OAAOyC,OAAS,IAC1BtE,KAAKlB,MAAMmE,UACXjD,KAAKlB,MAAMsE,iBACXpD,KAAKlB,MAAMqE,UAAY,kBAAC,EAAD,CAAQb,YAAatC,KAAKsC,cAClDtC,KAAKlB,MAAMmE,SACX,kBAAC,IAAD,CAAQ5C,KAAK,YAAYD,MAAM,UAAUkF,OAAQ,GAAIpF,MAAO0E,SAASC,gBAAgBU,cAErFvF,KAAKlB,MAAMoE,OAAS,uBAAGpD,UAAW,SAAd,0BACpBE,KAAKlB,MAAMqE,UAAY,uBAAGrD,UAAW,SAAd,iBAEvBE,KAAKlB,MAAMkE,WACX,kBAAC,EAAD,CAAOP,WAAYzC,KAAK0E,gBAAiB5B,MAAO9C,KAAKlB,MAAMyE,0B,GAnG9C7C,IAAMC,W,MCHxB6E,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,W","file":"static/js/main.9481d686.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Searchbar extends React.Component {\r\n static propTypes = {\r\n  forSubmitSearchbar: PropTypes.func.isRequired,\r\n  onInfiniteScroll: PropTypes.func.isRequired\r\n };\r\n\r\n state = {\r\n  inputValue: \"\",\r\n  agreed: true\r\n };\r\n handleChange = e => {\r\n  e.persist();\r\n  this.setState({ inputValue: e.target.value });\r\n };\r\n handleSubmit = e => {\r\n  e.preventDefault();\r\n\r\n  this.props.forSubmitSearchbar(this.state.inputValue);\r\n };\r\n handleCheckbox = e => {\r\n  this.setState({ agreed: e.target.checked });\r\n  this.props.onInfiniteScroll(e.target.checked);\r\n };\r\n render() {\r\n  return (\r\n   <header className=\"Searchbar\">\r\n    <form onSubmit={this.handleSubmit} className=\"SearchForm\">\r\n     <label style={{ width: 160, fontSize: 16, color: \"#000\" }}>\r\n      <input type=\"checkbox\" checked={this.state.agreed} onChange={this.handleCheckbox} />\r\n      Infinite Scroll\r\n     </label>\r\n\r\n     <button type=\"submit\" className=\"SearchForm-button\">\r\n      <span className=\"SearchForm-button-label\">Search</span>\r\n     </button>\r\n\r\n     <input\r\n      onChange={this.handleChange}\r\n      value={this.state.inputValue}\r\n      className=\"SearchForm-input\"\r\n      type=\"text\"\r\n      autoComplete=\"off\"\r\n      autoFocus\r\n      placeholder=\"Search images and photos\"\r\n     />\r\n    </form>\r\n   </header>\r\n  );\r\n }\r\n}\r\n\r\nexport default Searchbar;\r\n","const FetchImages = (q, page, pageAmount) => {\r\n return fetch(\r\n  `https://pixabay.com/api/?key=16717692-bb141906bc5c82eed9886cf8d&q=${q}&page=${page}&image_type=photo&orientation=horizontal&per_page=${pageAmount}`\r\n ).then(resp => resp.json());\r\n};\r\n\r\nexport default FetchImages;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ImageGalleryItem = ({ webformatURL, largeImageURL, modal }) => {\r\n return (\r\n  <li\r\n   onClick={() => {\r\n    modal(largeImageURL);\r\n   }}\r\n   className=\"ImageGalleryItem\"\r\n  >\r\n   <img src={webformatURL} alt=\"pic\" className=\"ImageGalleryItem-image\" />\r\n  </li>\r\n );\r\n};\r\n\r\nImageGalleryItem.propTypes = {\r\n webformatURL: PropTypes.string,\r\n largeImageURL: PropTypes.string,\r\n modal: PropTypes.func\r\n};\r\n\r\nImageGalleryItem.defaultProps = {\r\n webformatURL: \"https://dummyimage.com/640x480/2a2a2a/ffffff&text=Image+placeholder\",\r\n largeImageURL: \"https://dummyimage.com/640x480/2a2a2a/ffffff&text=Image+placeholder\"\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React from \"react\";\r\nimport ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ImageGallery = ({ modal, images }) => {\r\n console.log(\"RENDER ImageGallery\");\r\n return (\r\n  <ul className=\"ImageGallery\">\r\n   {images.map(el => (\r\n    <ImageGalleryItem\r\n     key={el.id}\r\n     webformatURL={el.webformatURL}\r\n     largeImageURL={el.largeImageURL}\r\n     modal={modal}\r\n    />\r\n   ))}\r\n   <div className=\"divForIntersectionObserver\"></div>\r\n  </ul>\r\n );\r\n};\r\n\r\nImageGallery.propTypes = {\r\n modal: PropTypes.func.isRequired,\r\n images: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ImageGallery;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Button extends React.Component {\r\n static propTypes = { fetchImgAPI: PropTypes.func.isRequired };\r\n\r\n handleClick = e => {\r\n  this.props.fetchImgAPI();\r\n };\r\n\r\n render() {\r\n  return (\r\n   <button onClick={this.handleClick} className={\"Button\"}>\r\n    Load more\r\n   </button>\r\n  );\r\n }\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Modal extends React.Component {\r\n static propTypes = { closeModal: PropTypes.func.isRequired, large: PropTypes.string };\r\n\r\n componentDidMount() {\r\n  window.addEventListener(\"keydown\", this.closeCallback);\r\n }\r\n componentWillUnmount() {\r\n  window.removeEventListener(\"keydown\", this.closeCallback);\r\n }\r\n closeCallback = e => {\r\n  if (e.key === \"Escape\") {\r\n   this.props.closeModal();\r\n  }\r\n };\r\n\r\n render() {\r\n  return (\r\n   <div\r\n    onClick={e => {\r\n     e.target.nodeName !== \"IMG\" && this.props.closeModal();\r\n    }}\r\n    className=\"Overlay\"\r\n   >\r\n    <div className=\"Modal\">\r\n     <img src={this.props.large} alt=\"pic\" />\r\n    </div>\r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport Searchbar from \"./Searchbar/Searchbar\";\r\nimport FetchImages from \"./FetchImages/FetchImages\";\r\nimport ImageGallery from \"./ImageGallery/ImageGallery\";\r\nimport Button from \"./Button/Button\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport Modal from \"./Modal/Modal\";\r\n\r\nclass App extends React.Component {\r\n state = {\r\n  openModal: false,\r\n  loading: false,\r\n  error: false,\r\n  noImages: false,\r\n  InfiniteScroll: true,\r\n  query: \"\",\r\n  images: [],\r\n  pageNumbear: 1,\r\n  pageAmount: 12,\r\n  largeImageForModal: undefined\r\n };\r\n\r\n getSnapshotBeforeUpdate(prevProps, prevState) {\r\n  return document.documentElement.scrollHeight - 160;\r\n }\r\n\r\n componentDidUpdate(prevProps, prevState, snapshot) {\r\n  //================IntersectionObserver===================================================\r\n  let specDiv = document.querySelector(\".divForIntersectionObserver\");\r\n  specDiv && this.state.InfiniteScroll && this.observer.observe(specDiv);\r\n  //=======================================================================================\r\n  if (prevState.query !== this.state.query) {\r\n   this.fetchImgAPI();\r\n  }\r\n\r\n  if (prevState.images.length !== this.state.images.length && prevState.images.length > 0) {\r\n   window.scrollTo({\r\n    top: snapshot,\r\n    behavior: \"smooth\"\r\n   });\r\n  }\r\n }\r\n\r\n //===================IntersectionObserver===================================================\r\n options = {\r\n  rootMargin: \"50px\",\r\n  threshold: 0.5\r\n };\r\n onEntry = (entries, observer) => {\r\n  entries.forEach(entry => {\r\n   entry.isIntersecting && this.fetchImgAPI();\r\n  });\r\n };\r\n observer = new IntersectionObserver(this.onEntry, this.options);\r\n\r\n onInfiniteScroll = value => this.setState({ InfiniteScroll: value });\r\n //===============================================================================\r\n\r\n fetchImgAPI = () => {\r\n  this.setState({ loading: true });\r\n  let { query, pageNumbear, pageAmount } = this.state;\r\n\r\n  FetchImages(query, pageNumbear, pageAmount)\r\n   .then(data => {\r\n    let arrImg = data.hits.map(el => ({\r\n     id: el.id,\r\n     webformatURL: el.webformatURL,\r\n     largeImageURL: el.largeImageURL\r\n    }));\r\n    if (arrImg.length === 0) {\r\n     this.setState({ noImages: true });\r\n    }\r\n    this.setState(prevState => ({\r\n     images: [...prevState.images, ...arrImg],\r\n     pageNumbear: (prevState.pageNumbear += 1)\r\n    }));\r\n   })\r\n   .catch(error => this.setState({ error }))\r\n   .finally(() => this.setState({ loading: false }));\r\n };\r\n\r\n forSubmitSearchbar = value => {\r\n  if (this.state.query !== value) {\r\n   this.setState({ query: value, images: [], pageNumbear: 1, noImages: false });\r\n  }\r\n };\r\n\r\n openModalToggle = largeImageURL => {\r\n  this.setState(() => ({ openModal: !this.state.openModal, largeImageForModal: largeImageURL }));\r\n };\r\n\r\n render() {\r\n  return (\r\n   <>\r\n    <Searchbar onInfiniteScroll={this.onInfiniteScroll} forSubmitSearchbar={this.forSubmitSearchbar} />\r\n    {this.state.images.length > 0 && <ImageGallery modal={this.openModalToggle} images={this.state.images} />}\r\n    {this.state.images.length > 0 &&\r\n     !this.state.loading &&\r\n     !this.state.InfiniteScroll &&\r\n     !this.state.noImages && <Button fetchImgAPI={this.fetchImgAPI} />}\r\n    {this.state.loading && (\r\n     <Loader type=\"ThreeDots\" color=\"#3f51b5\" height={80} width={document.documentElement.clientWidth} />\r\n    )}\r\n    {this.state.error && <p className={\"notif\"}>Error, try again later</p>}\r\n    {this.state.noImages && <p className={\"notif\"}> No Images!!!</p>}\r\n\r\n    {this.state.openModal && (\r\n     <Modal closeModal={this.openModalToggle} large={this.state.largeImageForModal} />\r\n    )}\r\n   </>\r\n  );\r\n }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport styles from \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}